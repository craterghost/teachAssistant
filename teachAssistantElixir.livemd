# Teach Assistant

```elixir
Mix.install([
  {:flow, "~> 1.2"}
])
```

## Section

Load the PDF file and extract the text

```elixir
# {:ok, file} = File.read("C:\\Users\\plasma\\Documents\\teachAssistant\\regelung.pdf")
# pdf_text = PDFExtract.extract_text(file)
pdf_text =
  'und gleichmäßig erwärmt\r\n.....werden.\r\nArbeitstemperatur und max. Löttemperatur begrenzen den\r\n.....Löttemperaturbereich.\r\nDer Wirktemperaturbereich des Flussmittels muss größer\r\n.....sein als der Löttemperaturbereich.\r\nDer Arbeitsplatz ist ausreichend zu lüften.\r\nQuelle: Fachkunde Metall\r\nUniversität Bremen\r\nFertigungsverfahren\r\nProf. E. Brinksmeier\r\n\r\nFan 0049\r\n\r\nGrundlagen des Lötens\r\n\r\n\x0c\n\nDas Kleben ist ein Fügeverfahren unter Verwendung eines Klebstoffes d. h. eines nichtmetallischen Werkstoffes,\r\nder es ermöglicht, die zu fügenden Teile durch Oberflächenhaftung (Adhäsion) und innerer Festigkeit (Kohäsion)\r\nzu verbinden, ohne das Gefüge der Körper wesentlich zu verändern. Dabei kann die Grenze zwischen Klebstoffen, Dichtungsstoffen und Bindemitteln nicht eindeutig genannt werden. Die Verbindung ist i. a. nur mit\r\nSchädigung oder Zerstörung der Fügeteile lösbar.\r\n\r\nGruppe 4.8\r\n\r\nKleben\r\n\r\n4.8.2 Kleben mit chemisch abbindenden Klebstoffen (Reaktionskleben)\r\n4.8.1 Kleben mit physikalisch abbindenden Klebstoffen\r\n\r\n4.8.1.1\r\n\r\n4.8.1.2\r\n\r\n4.8.1.3\r\n\r\n4.8.1.4\r\n\r\nNaßkleben\r\n\r\nKontaktkleben\r\n\r\nAktivierkleben\r\n\r\nHaftkleben\r\n\r\nQuelle: DIN 8593, T8\r\nUniversität Bremen\r\nFertigungsverfahren\r\nProf. E. Brinksmeier\r\n\r\nFan 0050\r\n\r\n4.8 Kleben\r\n\r\n\x0c\n\nKlebeverbindungen werden eingesetzt zum\r\n\r\nVerbinden von Konstruktionsteilen (Flugzeugbau)\r\nSichern von Schrauben (Fahrzeugbau)\r\nDichten von Fügeflächen (Gehäuse)\r\n\r\nQuelle: Fachkunde Metall, Dubbel\r\nUniversität Bremen\r\nFertigungsverfahren\r\nProf. E. Brinksmeier\r\n\r\nFan 0051\r\n\r\nEinsatzmöglichkeiten des Klebens\r\n\r\n\x0c\n\nVorteile des Klebens\r\nKeine Gefügeänderungen\r\nGleichmäßige Spannungsverteilung\r\nViele Werkstoffkombinationen\r\nDichte Verbindungen\r\nWenig Passarbeit erforderlich\r\n\r\nNachteile des Klebens\r\nGroße Fügeflächen nötig\r\nGeringe Dauerfestigkeit\r\nGeringe Warmfestigkeit\r\nTeilweise lange und komplizierte\r\n.....Aushärtung\r\n\r\nQuelle: Fachkunde Metall, Dubbel\r\nUniversität Bremen\r\nFertigungsverfahren\r\nProf. E. Brinksmeier\r\n\r\nFan 0052\r\n\r\nVor- und Nachteile des Klebens\r\n\r\n\x0c\n\nGrundlagen der Klebeverbindung\r\n\r\nDie Klebeverbindungen müssen großflächig sein und dürfen nicht auf Abschälen beansprucht werden\r\nDie Klebeflächen müssen trocken, sauber, fettfrei und leicht aufgeraut sein\r\nDie Klebstoffauftrag soll unmittelbar nach der Oberflächenvorbehandlung erfolgen\r\nDie Dicke der Klebstoffschicht soll 0,1 mm bis 0,3 mm betragen\r\nWährend der Aushärtung müssen'
```

Split the text into chunks

```elixir
pdf_text = 'und gleichmäßig erwärmt'
chunk_size = 4000
num_chunks = 2

chunks =
  Enum.take(String.split(pdf_text, ~r/%\s+/), num_chunks)
  |> Enum.chunk_every(chunk_size)
  |> Enum.map(&Enum.join/1)
```

Set up the text generation pipeline

```elixir
pipeline = Pipeline.new("text2text-generation", "bert-base-german-cased")
```

Now, let's define a function to generate a single flashcard:

```elixir
defmodule Flashcard do
  def generate_flashcard(chunk, existing_questions, similarity) do
    # Generate a question
    question =
      "Generiere eine spezifische technische Postgrad-Level Frage basierend auf folgendem Text:\n\n#{chunk}\n\n"

    # Check if the question is too similar to existing questions
    if Enum.any?(existing_questions, fn q -> String.similarity(question, q) > similarity end) do
      return(nil)
    end

    # Generate an answer
    answer = "#{question}\n\nAntworte einfach, technisch und spezifisch."

    # return the flashcard and its question
    {"Q: #{question}\nA: #{answer}", question}
  end
end
```

Now let's define a function to generate a list of flashcards for a given PDF file:

```elixir
defmodule FlashcardGenerator do
  def generate_flashcards(file_path, num_chunks, chunk_size, num_flashcards_per_chunk, similarity) do
    # Extract text from PDF file
    text = PDFUtils.extract_text_from_pdf(file_path)

    # Split text into chunks
    chunks = TextUtils.split_text(text, chunk_size)
    chunks = Enum.take(chunks, num_chunks)

    # Generate flashcards for each chunk of text
    existing_questions = []

    flashcards =
      Flow.from_enumerable(chunks)
      |> Flow.map(fn chunk ->
        Enum.reduce(1..num_flashcards_per_chunk, [], fn _, acc ->
          flashcard = Flashcard.generate_flashcard(chunk, existing_questions, similarity)

          if flashcard do
            existing_questions = [flashcard[1] | existing_questions]
            [flashcard[0] | acc]
          else
            acc
          end
        end)
      end)
      |> Flow.flatten()
      |> Flow.into([])
      |> Flow.run()

    # Shuffle the flashcards
    flashcards = Enum.shuffle(flashcards)

    flashcards
  end
end
```

Finally, let's define a function to print the generated flashcards:

```elixir
defmodule FlashcardPrinter do
  def print_flashcards(flashcards) do
    Enum.each(flashcards, &IO.puts/1)
  end
end
```

Run the ```generate_flashcards``` function with the appropriate parameters.

```elixir
flashcards = FlashcardGenerator.generate_flashcards("regelung.pdf", 2, 4000, 2, 0.8)
FlashcardPrinter.print_flashcards(flashcards)
```
